name: 🚀 Censudx Inventory Service CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  DATABASE_URL: 'sqlite:///./test.db'
  RABBITMQ_URL: 'amqp://guest:guest@localhost:5672/'
  SECRET_KEY: 'test-secret-key-for-ci'
  LOW_STOCK_THRESHOLD: '10'

jobs:
  # Job 1: Linting and Code Quality
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
        
    - name: 🖤 Check code formatting with Black
      run: black --check --diff .
      continue-on-error: true
      
    - name: 📋 Check import sorting with isort
      run: isort --check-only --diff .
      continue-on-error: true
      
    - name: 🔍 Lint with flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: true

  # Job 2: Security Scan
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 🛡️ Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: 🔍 Run Bandit security scan
      run: bandit -r user_service/ -f json -o bandit-report.json || true
      continue-on-error: true
      
    - name: 📋 Check for known vulnerabilities
      run: safety check || true
      continue-on-error: true

  # Job 3: Test Suite
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 💾 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 📦 Install core dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only essential dependencies for testing
        pip install fastapi uvicorn pydantic pytest pytest-asyncio httpx aio-pika
        pip install pytest-cov pytest-mock
        
    - name: 🧪 Run tests
      run: |
        python -m pytest test_inventory_api.py test_rabbitmq_integration.py -v

  # Job 4: Docker Build Test
  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🏗️ Build Docker image
      run: |
        docker build -t censudx-inventory-service:test .
        
    - name: 🔍 Validate docker-compose
      run: |
        # Test that docker-compose file is valid (using docker compose v2)
        docker compose config

  # Job 5: Quality Verification
  quality:
    name: ✅ Quality Verification
    runs-on: ubuntu-latest
    needs: [test, docker]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn pydantic pytest pytest-asyncio httpx aio-pika
        
    - name: ✅ Run quality verification
      run: |
        python verify_quality.py

  # Job 6: Deployment Readiness Check
  deploy-check:
    name: 🚀 Deployment Readiness
    runs-on: ubuntu-latest
    needs: [quality]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: ✅ Deployment ready
      run: |
        echo "🎉 All checks passed! Project is ready for deployment."
        echo "📦 Docker image: censudx-inventory-service"
        echo "🔗 Repository: ${{ github.repository }}"
        echo "📝 Commit: ${{ github.sha }}"
        echo "🏷️ Branch: ${{ github.ref_name }}"
