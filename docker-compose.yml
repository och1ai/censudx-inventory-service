version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: inventory_postgres
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - inventory-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: inventory_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: inventory
      RABBITMQ_DEFAULT_PASS: inventory_password
      RABBITMQ_DEFAULT_VHOST: inventory_vhost
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - inventory-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: inventory_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - inventory-network

  # Inventory Service
  inventory-service:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: inventory_service
    environment:
      - DATABASE_URL=postgresql://inventory_user:inventory_password@postgres:5432/inventory_db
      - RABBITMQ_URL=amqp://inventory:inventory_password@rabbitmq:5672/inventory_vhost
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=development-secret-key-change-in-production
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - LOW_STOCK_THRESHOLD=10
      - AUTH_SERVICE_URL=http://localhost:8001
      - PRODUCT_SERVICE_URL=http://localhost:8002
      - INVENTORY_SERVICE_URL=http://localhost:8000
      - LOG_LEVEL=INFO
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - inventory-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # API Gateway (optional - for routing)
  nginx:
    image: nginx:alpine
    container_name: inventory_gateway
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - inventory-service
    restart: unless-stopped
    networks:
      - inventory-network

volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local

networks:
  inventory-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16